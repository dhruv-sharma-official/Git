here are all the necessary git github commands for daily use

when we start working on any project first we have to make a repository on github and then clone it to the local machine using "git clone"
# git clone <repo link>

if the repo is public it will be cloned directly but if it is private git will ask you to signin using your browser and once you signin git will be automatically connected to your github account

after that we can start working on our cloned project

after modifing a file in our project the git status command will show the files which we have modified and we need to commit them
and if we create a new file it will show that file as an untracked file

there are 4 types of status of a file:
1. modified
 some changes are done in the file
2. untracked
 a new file detected which is tracked yet
3. staged
 file is staged and ready to commit
4. unmodified
 unchanged files

commit process will consist of two processes which are add and commit

when we apply add on a file it will be staged and when we commit it the status will set to unchanged

add - adds new or changed files in your working directory to the git staging are
# git add <filename>

commit - it is the record of change
# git commit -m "message about change"

after commiting we are ready to push the code to remote repo
for that we will use push command which is

# git push origin main
here push helps to upload code to remote repo and main is the address of the branch (main branch here)


=============================================================
init - used to connect a new git repo // first we have to make a new git repo on github then we will connect that repo to our cli for further use

git init

git remote add origin <link>    // to add remote repo to the git cli

git remote -v  // to verify remote

git branch // to check branch

git branch -M main   // to rename branch

git push origin main  // to push the files on main branch

now we will see -u tag in git push command

git push -u origin main    // here -u means upstream that means we want to set a upstream with main, we want to do all the work on main so next time when we use this command we just have to use "git push" and it will work on main because we have setted main as a upstream

############ so our work flow will be like 

github repo
  |
clone
  |
changes
  |
add 
  |
commit
  |
push

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
now we will see git branches

git branch   // to check the branch

git branch -M main  // to rename branch

git checkout <branch name>   // to navigate through branches

git checkout -b <new branch name>   // to create new branch

git branch -d <branch name>   // to delete branch


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
merging two branches

git diff <branch name>   // to compare commits, branches, files & more)

git merge <branch name>  // to merge 2 branches

or

we can just create a PR (pull request on github and merge our branches)

PR request can be used using github online and the branches could be merged

after that there is a cli way, which is to first compare the codes using git diff and then merge both branches using git merge

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

after that we have pull command

## git pull origin <branch name>   // fetches all the changes on remote repo to our local repo

if we have changed something on remote repo and we want it to revert on our local repo then we can use this command

remember we have to do all these merging operation on our local machine repo and then we have to push it.
if we push it first then it will show us "Already up to date"


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

now we have git conflicts

conflicts occur a lot of time on git operations, because of different changes on main and other branches 
if we have some changes on both branches then git is confused to select the changes so we have to first both the files with changes and then merge them so that the changes will be save correctly resolving the conflicts

here is one more line to check the conflicts
## new line










